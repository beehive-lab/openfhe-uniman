if(${CMAKE_VERSION} VERSION_LESS "3.22.0")
    message(FATAL_ERROR "Build with CUDA requires at least cmake 3.22.0")
endif()

find_package(CUDA)
set(CUDAToolkit_ROOT "${CUDA_TOOLKIT_ROOT_DIR}")
enable_language(CUDA)
include_directories("${CUDA_INCLUDE_DIRS}")

cmake_policy(SET CMP0074 NEW)

find_package(CUDAToolkit REQUIRED)
message(STATUS "GPU ACCELERATION: CUDA detected: ${CUDA_VERSION}")
message(STATUS "GPU ACCELERATION: CUDA nvcc is: ${CUDA_NVCC_EXECUTABLE}")
message(STATUS "GPU ACCELERATION: CUDA toolkit directory: ${CUDA_TOOLKIT_ROOT_DIR}")
if(CUDA_VERSION VERSION_LESS 11.5)
    message(FATAL_ERROR "GPU ACCELERATION requires CUDA 11.5 or above.")
endif()

cuda_detect_installed_gpus(INSTALLED_GPU_CCS_1)
if(NOT INSTALLED_GPU_CCS_1)
    set(CMAKE_CUDA_ARCHITECTURES 75 80 86)
    message(WARNING "No architectures detected. Using fallback architectures: ${CMAKE_CUDA_ARCHITECTURES}")
else()
    string(STRIP "${INSTALLED_GPU_CCS_1}" INSTALLED_GPU_CCS_2)
    string(REPLACE " " ";" INSTALLED_GPU_CCS_3 "${INSTALLED_GPU_CCS_2}")
    string(REPLACE "." "" CUDA_ARCH_LIST "${INSTALLED_GPU_CCS_3}")
    string(REPLACE "+PTX" "" CUDA_ARCH_LIST "${CUDA_ARCH_LIST}")
    set(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCH_LIST})
    message(STATUS "Detected CUDA architecture(s): ${CMAKE_CUDA_ARCHITECTURES}")
endif()

foreach(arch IN LISTS CMAKE_CUDA_ARCHITECTURES)
    list(APPEND CUDA_NVCC_FLAGS "--generate-code=arch=compute_${arch},code=sm_${arch}")
endforeach()

set(CUDA_SEPARABLE_COMPILATION ON)
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G -lineinfo -rdynamic")
